"use server";

import bcrypt from "bcryptjs";
import { isRedirectError } from "next/dist/client/components/redirect-error";
import { z } from "zod";

import { signIn } from "@/auth";
import { getCookie } from "@/lib/helpers/cookie";
import {
  deleteRegistrationSession,
  getRegistrationSession,
} from "@/lib/repositories/registrationSession";
import { createUser } from "@/lib/repositories/user";
import {
  deleteVerificationCode,
  getVerificationCode,
} from "@/lib/repositories/verification";

import { prisma } from "../../../../prisma/prisma";

const OneTimeCodeSchema = z.object({
  code: z.string().length(6, { message: "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 6 —Å–∏–º–≤–æ–ª–æ–≤." }),
});

type TVerifyCodeAndCreateUser = {
  status: {
    isAwaiting: boolean;
    isSuccess: boolean;
    isError: boolean;
  };
  redirectToSignUp?: boolean;
  errors?: Record<string, string[]>;
  error?: string;
};

export async function verifyCodeAndCreateUser(
  _prevState: unknown,
  formData: FormData,
): Promise<TVerifyCodeAndCreateUser> {
  console.log("‚è≥ –ù–∞—á–∞–ª–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    const fieldsData = {
      code: formData.get("code") as string,
    };
    console.log("üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã:", fieldsData);

    const validated = OneTimeCodeSchema.safeParse(fieldsData);
    if (!validated.success) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–¥–∞:",
        validated.error.flatten().fieldErrors,
      );
      return {
        status: { isAwaiting: false, isError: true, isSuccess: false },
        errors: validated.error.flatten().fieldErrors,
      };
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º email –∏–∑ cookie
    const emailCookie = await getCookie("email");
    if (!emailCookie) {
      console.error("‚ùå Email –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ cookie");
      return {
        status: { isAwaiting: false, isError: true, isSuccess: false },
        error: "Email –Ω–µ –Ω–∞–π–¥–µ–Ω.",
      };
    }

    const { value: email } = emailCookie;
    const { code } = validated.data;
    console.log("üìß –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º email:", email);

    // 3 –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const registrationSession = await getRegistrationSession(prisma, email);
    if (!registrationSession) {
      throw new Error("–°–µ—Å—Å–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", {
        cause: "redirect to sign up",
      });
    }

    if (new Date() > new Date(registrationSession.expiresAt)) {
      await deleteRegistrationSession(prisma, email);
      throw new Error("–°–µ—Å—Å–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–∞.", {
        cause: "redirect to sign up",
      });
    }

    const { name, password } = registrationSession.data as {
      name: string;
      password: string;
    };

    console.log("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", registrationSession);

    // 4. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é Prisma –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    await prisma.$transaction(async (tx) => {
      // 4.1 –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const verificationRecord = await getVerificationCode(tx, email, code);
      if (!verificationRecord) {
        throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.");
      }

      if (verificationRecord.expires < new Date()) {
        throw new Error("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫.");
      }

      // 4.2 –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      const hashedPassword = await bcrypt.hash(password, 10);
      console.log("üîë –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å–æ–∑–¥–∞–Ω");

      // 4.3 –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await createUser(tx, email, name, hashedPassword);
      console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", user);

      // 4.4 –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Å–µ—Å—Å–∏—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      await deleteVerificationCode(tx, email, code);
      await deleteRegistrationSession(tx, email);

      return user;
    });

    // 5. –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await signIn("credentials", { email, password });

    return { status: { isSuccess: true, isError: false, isAwaiting: false } };
  } catch (error) {
    const isErrorInstance = error instanceof Error;

    if (isRedirectError(error)) throw error;

    const errorMessage = isErrorInstance
      ? error.message
      : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.";

    const redirectToSignUp = isErrorInstance
      ? error.cause === "redirect to sign up"
      : false;

    return {
      status: { isAwaiting: false, isError: true, isSuccess: false },
      redirectToSignUp,
      error: errorMessage || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
    };
  }
}
