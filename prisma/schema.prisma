// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                   String                 @id @default(cuid())
  name                 String?
  email                String?                @unique
  emailVerified        DateTime?              @map("email_verified")
  password             String?
  image                String?
  accounts             Account[]
  sessions             Session[]
  resetToken           String? // Для сброса пароля
  resetTokenExpiry     DateTime? // Для сброса пароля
  files                File[]
  VerificationCode     VerificationCode[]
  PasswordResetSession PasswordResetSession[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model VerificationCode {
  id        Int                  @id @default(autoincrement())
  email     String
  code      String
  type      VerificationCodeType
  expires   DateTime
  createdAt DateTime             @default(now())

  // Опционально: связь с пользователем, если пользователь уже существует
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, code])
  @@map("verification_codes")
}

enum VerificationCodeType {
  REGISTER
  RESET_PASSWORD
}

model RegistrationSession {
  id        String   @id @default(cuid())
  email     String   @unique
  data      Json
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("registration_sessions")
}

model PasswordResetSession {
  id         String   @id @default(cuid())
  email      String // email, для которого запущен процесс сброса пароля
  isVerified Boolean  @default(false) // флаг, подтвержден ли введенный код
  expiresAt  DateTime // время, до которого действует эта сессия
  createdAt  DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email]) // можно ограничить так, чтобы для одного email была активна не более одной сессии
  @@map("password_reset_sessions")
}

model File {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  fileName   String   @map("file_name")
  fileKey    String   @map("file_key")
  fileSize   Int      @map("file_size")
  uploadedAt DateTime @default(now()) @map("uploaded_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, fileKey])
  @@map("files")
}
