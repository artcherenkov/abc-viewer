"use server";

import { isRedirectError } from "next/dist/client/components/redirect-error";

import { SignUpFormSchema } from "@/lib/descriptions/signUpFormSchema";
import { setHttpOnlyCookie } from "@/lib/helpers/cookie";
import { generateVerificationCode } from "@/lib/helpers/generateVerificationCode";
import { createRegistrationSession } from "@/lib/helpers/registrationSession";
import { sendEmail } from "@/lib/helpers/sendVerificationEmail";

import { prisma } from "../../../../prisma/prisma";

type TSendVerificationCodeStatus = Record<
  "isAwaiting" | "isSuccess" | "isError" | "hasCodeSent",
  boolean
>;

type TSendVerificationCode = {
  status: TSendVerificationCodeStatus;
  fieldsData: { name: string; email: string; password: string };
  errors?: Record<string, string[]>;
  errorMessage?: string;
};

export async function sendVerificationCode(
  _prevState: unknown,
  formData: FormData,
): Promise<TSendVerificationCode> {
  try {
    console.log("‚è≥ –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏");

    // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
    const fieldsData = {
      name: formData.get("name") as string,
      email: formData.get("email") as string,
      password: formData.get("password") as string,
    };

    const validated = SignUpFormSchema.safeParse(fieldsData);
    if (!validated.success) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª–µ–π",
        validated.error.flatten().fieldErrors,
      );
      return {
        status: {
          isAwaiting: false,
          isSuccess: false,
          isError: true,
          hasCodeSent: false,
        },
        fieldsData,
        errors: validated.error.flatten().fieldErrors,
        errorMessage: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª–µ–π.",
      };
    }

    const { email } = validated.data;
    console.log(`üìß –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email: ${email}`);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const existingUser = await prisma.user.findUnique({ where: { email } });
    if (existingUser) {
      console.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      return {
        status: {
          isAwaiting: false,
          isSuccess: false,
          isError: true,
          hasCodeSent: false,
        },
        fieldsData,
        errorMessage: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
      };
    }

    // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const code = generateVerificationCode();
    console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}`);

    // 4. –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –ë–î –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await prisma.$transaction(async (tx) => {
      console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é");

      // 4.1 –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      await createRegistrationSession(email, fieldsData);
      console.log("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞");

      // 4.2 –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HttpOnly cookie
      await setHttpOnlyCookie({ name: "email", value: email });
      console.log("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω HttpOnly cookie");

      // 4.3 –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–¥—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ email
      await tx.verificationCode.deleteMany({
        where: { email, type: "REGISTER" },
      });

      // 4.4 –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      await tx.verificationCode.create({
        data: {
          email,
          code,
          type: "REGISTER",
          expires: new Date(Date.now() + 10 * 60 * 1000), // –ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç
        },
      });

      console.log("‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î");
    });

    // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    console.log("üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ email:", email);
    await sendEmail({
      to: email,
      subject: "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
      html: `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}`,
    });

    console.log("‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");

    return {
      status: {
        isAwaiting: false,
        isSuccess: true,
        isError: false,
        hasCodeSent: true,
      },
      fieldsData,
    };
  } catch (error) {
    if (isRedirectError(error)) throw error;

    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞:", error);

    return {
      status: {
        isAwaiting: false,
        isSuccess: false,
        isError: true,
        hasCodeSent: false,
      },
      fieldsData: {
        name: formData.get("name") as string,
        email: formData.get("email") as string,
        password: formData.get("password") as string,
      },
      errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
    };
  }
}
